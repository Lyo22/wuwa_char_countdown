---
import {servers} from "../constants/index"

const userTimezone = Intl.DateTimeFormat().resolvedOptions().timeZone
const timezone = userTimezone.split("/")[0]

---

<div class="custom-select-wrapper">
  <button id="dropdown-btn" class="custom-select-btn">
    <span id="selected-option"></span>
  </button>

  <ul id="dropdown-menu" class="custom-select-menu hidden">
    {servers.map((opt) => (
      <li
        class="custom-select-option"
        data-value={opt.name}
      >
        {opt.name}
      </li>
    ))}
  </ul>

  <input type="hidden" name="server" id="server-input" value={servers.find( ({zone}) => zone.split("/")[0]  == timezone)?.zone.split("/")[0]} />
</div>

<style>
 
  .custom-select-wrapper {
    z-index: 99;
    position: fixed;
    margin: 10px 14px;
    top: 0;
    right: 0;
    width:100px;
    user-select: none;
  }

  .custom-select-btn {
    width: 100%;
    background-color: transparent;
    color: white;
    padding: 10px;
    border-radius: 5px;
    cursor: pointer;
    text-align: left;
  }

  .custom-select-menu {
    position: absolute;
    top: 100%;
    left: 0;
    width: 100%;
    margin-top: 4px;
    background-color: rgba(0, 0, 0, 0.291);
    border-radius: 5px;
    list-style: none;
    padding: 0;
    margin: 0;
    z-index: 1000;
  }

  .custom-select-option {
    padding: 10px;
    cursor: pointer;

  }

  .custom-select-option:hover {
    background-color: rgba(255, 255, 255, 0.209);
  }

  .hidden {
    display: none;

  }
</style>

<script>

import {servers} from "../constants/index"

  const btn = document.getElementById('dropdown-btn') as HTMLElement;
  const menu = document.getElementById('dropdown-menu') as HTMLElement;
  const options = menu?.querySelectorAll('li') ;
  const selectedText = document.getElementById('selected-option') as HTMLElement;
  const hiddenInput = document.getElementById('server-input') as HTMLInputElement;

  const params = new URLSearchParams(window.location.search);
  const defaultZone = Intl.DateTimeFormat().resolvedOptions().timeZone;
  const fallbackServer = servers.find(({ zone }) => zone.split("/")[0] === defaultZone.split("/")[0])?.name ?? "America";
  const serverParam =  (servers.find(({ zone }) => zone.split("/")[0] === params.get("server") )?.name) || fallbackServer; 

  let selectedServer = serverParam;
  selectedText.textContent = selectedServer;

  btn.addEventListener('click', () => {
    menu.classList.toggle('hidden');
  });

  options.forEach(option => {
    option.addEventListener('click', () => {
      const value = option.dataset.value as string;
      selectedText.textContent = value;
      hiddenInput.value = value;
      menu.classList.add('hidden');


    const params = new URLSearchParams(window.location.search);
    params.set("server", value);
    const newUrl = `${window.location.pathname}?${params.toString()}`;
    window.history.pushState({}, '', newUrl);


     document.dispatchEvent(new CustomEvent("serverChanged", { detail: value }));
    });
  });

 document.addEventListener('click', (e: MouseEvent) => {
  const target = e.target as Node;
  if (!btn.contains(target) && !menu.contains(target)) {
    menu.classList.add('hidden');
  }
});

</script>
