---
const { date, newVersion } = Astro.props;


import { DateTime } from 'luxon';
import {servers} from "../constants/index"
import {parserTime} from '../utils/parserTime'


const userTimezone = Intl.DateTimeFormat().resolvedOptions().timeZone
const tz = userTimezone.split("/")[0]
const serverTimeZone = Boolean(newVersion) ? "UTC+8" : servers.find( ({zone}) => zone.split("/")[0]  == tz)?.zone

const now = DateTime.now().setZone(userTimezone);

let [_, userTime ] = parserTime(Number(date), serverTimeZone, userTimezone)

const userDateParser = DateTime.fromJSDate(new Date(userTime!))
const isExpired = userDateParser <= now;

console.log({ now: now.toISO(), userDate: userDateParser.toISO(), isExpired });

---


{!isExpired && (
  <script type="module" src="src/utils/countdown.ts"></script>
)}


{!isExpired ? (
  <div id="countdown" data-new-version={newVersion} data-time={date.getTime()} class="grid auto-cols-max grid-flow-col gap-5 text-center">
   <div class="flex flex-col">
    <span class="countdown font-mono text-5xl">
      <span style="--value:00;" aria-live="polite" id="days" aria-label="00">00</span>
    </span>
    days
  </div>
  <div class="flex flex-col">
    <span class="countdown font-mono text-5xl">
      <span style="--value:00;" aria-live="polite" id="hours" aria-label="00">00</span>
    </span>
    hours
  </div>
  <div class="flex flex-col">
    <span class="countdown font-mono text-5xl">
      <span style="--value:00;" aria-live="polite" id="min" aria-label="00">00</span>
    </span>
    min
  </div>
  <div class="flex flex-col">
    <span class="countdown font-mono text-5xl">
      <span style="--value:00;" aria-live="polite" id="sec" aria-label="00">00</span>
    </span>
    sec
  </div>
  </div>
) : (
  <h2 id="version-release" class="text-center text-2xl font-bold">
      Version {import.meta.env.VERSION} <span> is out</span>
  </h2>
)}



