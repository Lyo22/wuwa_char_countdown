---
const { date, newVersion } = Astro.props 


---

<script>

import { DateTime } from 'luxon';
import { servers } from '../constants';

let container = document.getElementById("countdown");
const userTimeZone = Intl.DateTimeFormat().resolvedOptions().timeZone; 
const serverTimeZone = Boolean(container?.dataset.newVersion) ? "+8" : servers.find(server => server.name == (document.getElementById("server-input") as HTMLInputElement).value)?.zone;

let [serverTime, userTime ] = parserTime(Number(container?.dataset.time), serverTimeZone, userTimeZone)

const dt = Number(DateTime.fromISO(userTime as string));

let days = document.getElementById("days");
let hours = document.getElementById("hours");
let minutes= document.getElementById("min");
let seconds = document.getElementById("sec");

let msInDay = 1000 * 60 * 60 * 24;
let msInHour = 1000 * 60 * 60;
let msInMinute = 1000 * 60;

let x = setInterval(() => { 
    let now = Date.now();
    let diff = dt - now;
 
    if (diff <= 0) {
    clearInterval(x);
    return;
}

    let d = String(Math.floor(diff / msInDay));
    let h =String( Math.floor((diff % msInDay) / msInHour));
    let m = String(Math.floor((diff % msInHour) / msInMinute));
    let s =String( Math.floor((diff % msInMinute) / 1000));

    updateUi(d,h,m,s)

    
},1000)


function updateUi(d: string,h: string,m: string,s: string) {
    days?.style.setProperty("--value", d);
    hours?.style.setProperty("--value", h);
    minutes?.style.setProperty("--value", m);
    seconds?.style.setProperty("--value", s);

    
}


function parserTime(date:number, serverTimeZone: string | undefined, userTimeZone: string) {

const utc = DateTime.fromISO(new Date(date).toISOString(), { zone: 'utc' });
const inServer = utc.setZone(serverTimeZone);
const fromServerToUser = DateTime.fromObject(
  {
    year: utc.year,
    month: utc.month,
    day: utc.day,
    hour: utc.hour,
    minute: utc.minute,
    second: utc.second
  },
  { zone: serverTimeZone}
).setZone(userTimeZone);


  return [inServer.toISO(), fromServerToUser.toISO()]
}





</script>


<script >


/*
function convertServerTimeToLocal(year, month, day, time, serverTimeZone, userTimeZone = local.timeZone) {

  const dateTimeString = `${year}-${month}-${day}T${time}`;
  
  // Crear fecha base
  const baseDate = new Date(dateTimeString);
  

  /* const getTimezoneOffset = (date, timeZone) => {
    const utcDate = new Date(date.toLocaleString('en-US', { timeZone: 'UTC' }));
    const tzDate = new Date(date.toLocaleString('en-US', { timeZone }));
    return utcDate.getTime() - tzDate.getTime();
  };
  */

   /*
  const serverOffset = getTimezoneOffset(baseDate, serverTimeZone);
  const userOffset = getTimezoneOffset(baseDate, userTimeZone);
*/

  // const adjustedDate = new Date(baseDate.getTime() + serverOffset - userOffset);
  
    /*
  return adjustedDate.toLocaleString('en-US', {
    timeZone: userTimeZone,
    hour: '2-digit',
    minute: '2-digit',
    hour12: false
  });


}


 */



</script>



<div id="countdown" data-new-version={newVersion} data-time={date.getTime()} class="grid auto-cols-max grid-flow-col gap-5 text-center">
  <div class="flex flex-col">
    <span class="countdown font-mono text-5xl">
      <span style="--value:00;" aria-live="polite" id="days" aria-label="00">00</span>
    </span>
    days
  </div>
  <div class="flex flex-col">
    <span class="countdown font-mono text-5xl">
      <span style="--value:00;" aria-live="polite" id="hours" aria-label="00">00</span>
    </span>
    hours
  </div>
  <div class="flex flex-col">
    <span class="countdown font-mono text-5xl">
      <span style="--value:00;" aria-live="polite" id="min" aria-label="00">00</span>
    </span>
    min
  </div>
  <div class="flex flex-col">
    <span class="countdown font-mono text-5xl">
      <span style="--value:00;" aria-live="polite" id="sec" aria-label="00">00</span>
    </span>
    sec
  </div>
</div>